[include KASE_park.cfg]
[include KASE_purge.cfg]

[gcode_macro _KASE_START_STATUS]
gcode:
  SET_DISPLAY_TEXT MSG="start: {params.MSG}"
  RESPOND PREFIX="start: " MSG="{params.MSG}"

[gcode_macro PRINT_START]
gcode:
  ;
  ; Temperature parameters
  ;
  {% set temp_bed = params.TEMP_BED | default(60) | float %}
  {% set temp_extruder = params.TEMP_EXTRUDER | default(200) | float %}
  {% set temp_chamber = params.TEMP_CHAMBER | default(0) | float %}
  
  ;
  ; Printer abilities
  ;
  {% set is_delta = printer.configfile.settings.printer.kinematics == 'delta' %}
  {% set can_zta = printer.z_tilt is defined %}
  {% set can_qgl = printer.quad_gantry_level is defined %}
  {% set can_mbl = printer.bed_mesh is defined %}
  
  ; Macro support detection
  {% set macro_ellis_bedfans = printer['gcode_macro _BEDFANVARS'] is defined %}
  {% set macro_voron_sb = printer['gcode_macro _SB_VARS'] is defined %}
  
  
  ;
  ; Internal variables
  ;
  {% set cfg = printer['gcode_macro _KASE_CONFIG'] %}

  ; adjustment sequence tasks
  {% set do_home_xyz = 'xyz' not in printer.toolhead.homed_axes %}
  {% set do_home_zta = printer.z_tilt.applied if can_zta else False %}
  {% set do_home_qgl = printer.quad_gantry_level.applied if can_qgl else False %}
  {% set do_home_mbl = printer.bed_mesh.profile_name is not defined or printer.bed_mesh.profile_name | length == 0 if can_mbl else False %}
  
  {% set temp_extruder_homing_max = temp_extruder if cfg.start_homing_max_extruder_temperature is not defined or not cfg.start_homing_max_extruder_temperature or temp_extruder <= cfg.start_homing_max_extruder_temperature else cfg.start_homing_max_extruder_temperature %}
  
  ; Manual purge lines
  {% set purge_x_offset = cfg.purge_x_offset | default(0) | float %}
  {% set purge_y_padding = cfg.purge_y_padding | default(20) | float %}
  {% set purge_line_height = cfg.purge_line_height | default(0.3) | float %}
  {% set purge_line_width = cfg.purge_line_width | default(0.4) | float %}
  ; calculated wipe parameters
  {% set purge_y_min = purge_y_padding %}
  {% set purge_y_max = printer.toolhead.axis_maximum.y - purge_y_padding %}
  {% set purge_y_length = purge_y_max - purge_y_min %}
  ; TODO: calculate extrusion length correctly from purge_line_height, purge_line_width and purge_y_length
  ; https://3dprinting.stackexchange.com/questions/6289/how-is-the-e-argument-calculated-for-a-given-g1-command

  {% if macro_voron_sb %}
    STATUS_BUSY
  {% endif %}

  {% if cfg.start_custom_gcode_before is defined %}
    {cfg.start_custom_gcode_before}
  {% endif %}

  ;
  ; Temperatures
  ;
  _KASE_START_STATUS MSG="pre-heating extruder = {temp_extruder} C, bed = {temp_bed} C"

  M104 S{temp_extruder_homing_max} T0 ; extruder preheating
  M140 S{temp_bed} ; bed heating

    {% if macro_voron_sb %}
    STATUS_HEATING
  {% endif %}

  ;
  ; Setup & Homing
  ;
  {% if printer['gcode_macro _KASE_CONFIG'].start_always_home_xyz or do_home_xyz %}
    _KASE_START_STATUS MSG="homing XYZ"

      {% if macro_voron_sb %}
        STATUS_HOMING
      {% endif %}

    G28 X Y
  
    {% if cfg.start_custom_gcode_before_leveling is defined %}
      {cfg.start_custom_gcode_before_leveling}
    {% endif %}

    G28 Z

    {% if cfg.start_custom_gcode_after_leveling is defined %}
      {cfg.start_custom_gcode_after_leveling}
    {% endif %}
  {% endif %}
  G92 E0 ; Reset extruder
  G90 ; Absolute positioning


  ;
  ; Chamber pre-heat and probing temperature
  ;
  {% if macro_voron_sb %}
    STATUS_HEATING
  {% endif %}

  M190 S{temp_bed} ; wait for bed temp

  {% if temp_chamber > 0 and cfg.sensor_chamber is defined %}
    ; Wait for chamber temp - we assume heatsoak is done in the meantime

    _KASE_START_STATUS MSG="waiting for chamber temperature = {temp_chamber} C"

    ; move extruder close to the bed
    _KASE_PARK 

    ; enable all available fan types to help chamber heat up quickly
    M106 S255 ; part cooling fan
    {% if cfg.gcode_bed_fans_heating is defined %}
      ; set custom bed fans
      {cfg.gcode_bed_fans_heating}
    {% endif %}

    ; wait for the chamber to reach the target temperature
    TEMPERATURE_WAIT SENSOR="temperature_sensor {cfg.sensor_chamber}" MINIMUM={target_chamber}

    ; disable part cooler fan again
    M107
    {% if cfg.gcode_bed_fans_printing is defined %}
      ; lower chamber fans
      {cfg.gcode_bed_fans_printing}
    {% endif %}
  
    ; beep so we know the wait is over
    { cfg.gcode_beep }
  {% elif temp_bed >= cfg.start_heatsoak_min_temp | default(90) | int %}
    ; wait for bed heat soaking

    ; TODO: calculate soak time based on bed size and target bed temperature
    {% set soak_time = 300 %}

    _KASE_START_STATUS MSG="waiting {(soak_time / 60) | round(1)} min for bed heat soaking"

    G4 P{soak_time * 1000} ; wait 5 minutes

    ; beep so we know the wait is over
    { cfg.gcode_beep }
  {% elif cfg.start_heatsoak_minimum_seconds is defined %}
    G4 P{cfg.start_heatsoak_minimum_seconds * 1000}

    ; beep so we know the wait is over
    { cfg.gcode_beep }
  {% endif %}

  ; Use KAMP smart parking if available
  {% if temp_extruder_homing_max == temp_extruder %}
    _KASE_PARK
  {% endif %}

  {% if macro_voron_sb %}
    STATUS_HEATING
  {% endif %}
  
  ; wait for extruder homing temp
  M109 S{temp_extruder_homing_max} T0


  ;
  ; Adjustments
  ;

  {% if cfg.start_custom_gcode_before_leveling is defined %}
    {cfg.start_custom_gcode_before_leveling}
  {% endif %}

  ; Z Tilt Adjustment
  {% if cfg.start_always_z_tilt_adjust or do_home_zta %}
    _KASE_START_STATUS MSG="adjusting Z tilt"

    {% if macro_voron_sb %}
      STATUS_CALIBRATING_Z
    {% endif %}

    Z_TILT_ADJUST
    G28 Z
    {% set did_home_z_again = True %}
  {% endif %}

  ; Quad Gantry Level
  {% if cfg.start_always_quad_gantry_level or do_home_qgl %}
    _KASE_START_STATUS MSG="leveling quad gantry"

    {% if macro_voron_sb %}
      STATUS_LEVELING
    {% endif %}

    QUAD_GANTRY_LEVEL
    G28 Z
    {% set did_home_z_again = True %}
  {% endif %}

  ; Home Z again at temperature if it wasn't homed again after ZTA or QGL
  {% if did_home_z_again is not defined %}
    _KASE_START_STATUS MSG="homing Z at temperature"

    {% if macro_voron_sb %}
      STATUS_CALIBRATING_Z
    {% endif %}

    G28 Z
  {% endif %}

  ; Bed mesh leveling
  {% if cfg.start_always_bed_mesh_level or do_home_mbl %}
    _KASE_START_STATUS MSG="calibrating bed mesh"

    {% if macro_voron_sb %}
      STATUS_MESHING
    {% endif %}

    BED_MESH_CLEAR
    BED_MESH_CALIBRATE SAVE={cfg.start_bed_mesh_leveling | default('default') }
    G0 Z10 F6000 ; Z hop to 10mm
  {% endif %}

  {% if cfg.start_custom_gcode_after_leveling is defined %}
    {cfg.start_custom_gcode_after_leveling}
  {% endif %}

  ; Final extruder temperature after all possible nozzle probing is done
  {% if temp_extruder != temp_extruder_homing_max %}
    _KASE_START_STATUS MSG="waiting for extruder extruder temperature = {temp_extruder} C"

    ; Use KAMP smart parking if available
    _KASE_PARK

    {% if macro_voron_sb %}
      STATUS_HEATING
    {% endif %}

    M109 S{temp_extruder} T0 ; extruder final heating
  {% endif %}

  {% if cfg.start_custom_gcode_before is defined %}
    {cfg.start_custom_gcode_after}
  {% endif %}

  ; Beep twice so we know the print will start now
  { cfg.gcode_beep }
  G4 P300
  { cfg.gcode_beep }

  {% if macro_voron_sb %}
    STATUS_PRINTING
  {% endif %}

  ;
  ; Purging
  ;
  {% if not cfg.start_purging_disable %}
    _KASE_START_STATUS MSG="purging"
    _KASE_PURGE
  {% endif %}

  ;
  ; clear display text
  ;
  SET_DISPLAY_TEXT
